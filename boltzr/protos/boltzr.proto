syntax = "proto3";

package boltzr;

service BoltzR {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc GetMessages (GetMessagesRequest) returns (stream GetMessagesResponse);

  rpc SwapUpdate (stream SwapUpdateRequest) returns (stream SwapUpdateResponse);

  rpc StartWebHookRetries (StartWebHookRetriesRequest) returns (StartWebHookRetriesResponse);
  rpc CreateWebHook (CreateWebHookRequest) returns (CreateWebHookResponse);
  rpc SendWebHook (SendWebHookRequest) returns (SendWebHookResponse);

  rpc SignEvmRefund (SignEvmRefundRequest) returns (SignEvmRefundResponse);
}

message GetInfoRequest {}
message GetInfoResponse {
  string version = 1;
}

message SendMessageRequest {
  string message = 1;
  optional bool is_alert = 2;
}
message SendMessageResponse {}

message GetMessagesRequest {}
message GetMessagesResponse {
  string message = 1;
}

message SwapUpdate {
  message TransactionInfo {
    string id = 1;
    optional string hex = 2;
    optional uint64 eta = 3;
  }

  message FailureDetails {
    uint64 expected = 1;
    uint64 actual = 2;
  }

  message ChannelInfo {
    string funding_transaction_id = 1;
    uint64 funding_transaction_vout = 2;
  }

  string id = 1;
  string status = 2;

  optional bool zero_conf_rejected = 3;
  optional TransactionInfo transaction_info = 4;

  optional string failure_reason = 5;
  optional FailureDetails failure_details = 6;

  optional ChannelInfo channel_info = 7;
}

message SwapUpdateRequest {
  repeated SwapUpdate status = 1;
}

message SwapUpdateResponse {
  repeated string ids = 1;
}

message StartWebHookRetriesRequest {}
message StartWebHookRetriesResponse {}

message CreateWebHookRequest {
  string id = 1;
  string url = 2;
  bool hash_swap_id = 3;
  repeated string status = 4;
}
message CreateWebHookResponse {}

message SendWebHookRequest {
  string id = 1;
  string status = 3;
}

message SendWebHookResponse {
  bool ok = 1;
}

message SignEvmRefundRequest {
  bytes preimage_hash = 1;
  string amount = 2;
  // When populated, an ERC20 refund signature will be signed
  optional string token_address = 3;
  uint64 timeout = 4;
}

message SignEvmRefundResponse {
  bytes signature = 1;
}
